
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef DSP_H
#define DSP_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "dsp.tables.h"

static_inline fix16_t Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
};

static_inline fix16_t Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
};

static_inline fix16_t Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
};

static_inline fix16_t Saturate_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_tanh_table_c2)[index]))));
}

static_inline fix16_t Saturate_process(fix16_t x){
   return Saturate_tanh_table(x);
};

static_inline void Saturate_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_noteOff(int note, int channel){
}

static_inline void Saturate_controlChange(int control, int value, int channel){
}

static_inline void Saturate_default(){
}

typedef struct Dsp__ctx_type_0 {
   fix16_t x4;
   fix16_t x3;
   fix16_t x2;
} Dsp__ctx_type_0;

typedef Dsp__ctx_type_0 Dsp_soft_type;

void Dsp__ctx_type_0_init(Dsp__ctx_type_0 &_output_);

static_inline void Dsp_soft_init(Dsp__ctx_type_0 &_output_){
   Dsp__ctx_type_0_init(_output_);
   return ;
}

fix16_t Dsp_soft(Dsp__ctx_type_0 &_ctx, fix16_t x1);

typedef struct Dsp__ctx_type_1 {
   int write_pos;
   fix16_t buffer[22050];
} Dsp__ctx_type_1;

typedef Dsp__ctx_type_1 Dsp_do_type;

void Dsp__ctx_type_1_init(Dsp__ctx_type_1 &_output_);

static_inline void Dsp_do_init(Dsp__ctx_type_1 &_output_){
   Dsp__ctx_type_1_init(_output_);
   return ;
}

fix16_t Dsp_do(Dsp__ctx_type_1 &_ctx, fix16_t x, fix16_t time, fix16_t feedback);

typedef struct Dsp__ctx_type_2 {
   Dsp__ctx_type_1 _inst29a;
   Dsp__ctx_type_0 _inst1e;
} Dsp__ctx_type_2;

typedef Dsp__ctx_type_2 Dsp_process_type;

void Dsp__ctx_type_2_init(Dsp__ctx_type_2 &_output_);

static_inline void Dsp_process_init(Dsp__ctx_type_2 &_output_){
   Dsp__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Dsp_process(Dsp__ctx_type_2 &_ctx, fix16_t x, fix16_t time, fix16_t feedback){
   return Dsp_do(_ctx._inst29a,x,Dsp_soft(_ctx._inst1e,time),feedback);
};

typedef Dsp__ctx_type_2 Dsp_noteOn_type;

static_inline void Dsp_noteOn_init(Dsp__ctx_type_2 &_output_){
   Dsp__ctx_type_2_init(_output_);
   return ;
}

static_inline void Dsp_noteOn(Dsp__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

typedef Dsp__ctx_type_2 Dsp_noteOff_type;

static_inline void Dsp_noteOff_init(Dsp__ctx_type_2 &_output_){
   Dsp__ctx_type_2_init(_output_);
   return ;
}

static_inline void Dsp_noteOff(Dsp__ctx_type_2 &_ctx, int note, int channel){
}

typedef Dsp__ctx_type_2 Dsp_controlChange_type;

static_inline void Dsp_controlChange_init(Dsp__ctx_type_2 &_output_){
   Dsp__ctx_type_2_init(_output_);
   return ;
}

static_inline void Dsp_controlChange(Dsp__ctx_type_2 &_ctx, int control, int value, int channel){
}

typedef Dsp__ctx_type_2 Dsp_default_type;

static_inline void Dsp_default_init(Dsp__ctx_type_2 &_output_){
   Dsp__ctx_type_2_init(_output_);
   return ;
}

static_inline void Dsp_default(Dsp__ctx_type_2 &_ctx){
}



#endif // DSP_H
